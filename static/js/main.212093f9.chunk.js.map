{"version":3,"sources":["services/SolverService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["findWords","foundWordsReference","board","words","y","x","currentWord","arguments","length","undefined","usedCoordinates","stringToTest","possibleWords","filter","word","startsWith","coordinates","concat","Object","toConsumableArray","locationOfWord","indexOf","push","path","isUsedCoordinate","yy","xx","some","numbers","doesRightExist","isRightPossible","doesLeftExist","isLeftPossible","doesDownExist","isDownPossible","doesUpExist","isUpPossible","isUpRightPossible","isUpLeftPossible","isDownRightPossible","isDownLeftPossible","solveForBoard","wordsOrganizedByFirstLetter","groups","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","firstLetter","test","Array","isArray","err","return","organizeWordsByFirstLetter","wordlist","foundWords","_arr","keys","_i","_arr2","Number","_i2","toLocaleLowerCase","Results","styled_base_browser_esm","target","name","styles","Container","Box","Input","props","highlighted","App","state","highlightedPath","openedWords","results","values","map","inputRefs","React","createRef","toggleWord","_this","includes","setState","openedWord","highlightPath","solveBoard","letters","reduce","prev","curr","index","chunk","Math","floor","SolverService","letter","onChange","key","event","newValues","slice","currentTarget","toLocaleUpperCase","every","nextInput","current","focus","_this2","this","_this$state","groupedResults","groupBy","sort","a","b","react_default","createElement","i","onClick","result","ref","type","coordinate","convertNumberToXY","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.212093f9.chunk.js","sourcesContent":["import wordlist from '../assets/words.json';\n\ntype IBoard = string[][];\n\nfunction organizeWordsByFirstLetter(words: string[]) {\n  const groups: {\n    [letter: string]: string[];\n  } = {};\n\n  for (const word of words) {\n    const firstLetter = word[0];\n\n    if (!/^[a-zäöå]$/.test(firstLetter)) {\n      continue;\n    }\n\n    if (Array.isArray(groups[firstLetter])) {\n      groups[firstLetter].push(word);\n    } else {\n      groups[firstLetter] = [word];\n    }\n  }\n\n  return groups;\n}\n\nexport interface ICoordinate {\n  x: number;\n  y: number;\n}\n\nexport interface IResult {\n  path: ICoordinate[];\n  word: string;\n}\n\nfunction findWords(\n  foundWordsReference: IResult[],\n  board: IBoard,\n  words: string[],\n  y: number,\n  x: number,\n  currentWord: string = '',\n  usedCoordinates: ICoordinate[] = []\n) {\n  const stringToTest = currentWord + board[y][x];\n\n  if (!words.length || stringToTest.length > 10) {\n    return;\n  }\n\n  const possibleWords = words.filter(word => word.startsWith(stringToTest));\n  const coordinates: Array<{ x: number; y: number }> = [\n    ...usedCoordinates,\n    { y, x }\n  ];\n\n  const locationOfWord = words.indexOf(stringToTest);\n\n  if (locationOfWord > -1) {\n    delete words[locationOfWord];\n\n    foundWordsReference.push({\n      path: coordinates,\n      word: stringToTest\n    });\n  }\n\n  const isUsedCoordinate = (yy: number, xx: number) =>\n    coordinates.some(numbers => numbers.y === yy && numbers.x === xx);\n\n  const doesRightExist = x + 1 <= 3;\n  const isRightPossible = doesRightExist && !isUsedCoordinate(y, x + 1);\n\n  const doesLeftExist = x - 1 >= 0;\n  const isLeftPossible = doesLeftExist && !isUsedCoordinate(y, x - 1);\n\n  const doesDownExist = y + 1 <= 3;\n  const isDownPossible = doesDownExist && !isUsedCoordinate(y + 1, x);\n\n  const doesUpExist = y - 1 >= 0;\n  const isUpPossible = doesUpExist && !isUsedCoordinate(y - 1, x);\n\n  const isUpRightPossible =\n    doesRightExist && doesUpExist && !isUsedCoordinate(y - 1, x + 1);\n  const isUpLeftPossible =\n    doesLeftExist && doesUpExist && !isUsedCoordinate(y - 1, x - 1);\n  const isDownRightPossible =\n    doesRightExist && doesDownExist && !isUsedCoordinate(y + 1, x + 1);\n  const isDownLeftPossible =\n    doesLeftExist && doesDownExist && !isUsedCoordinate(y + 1, x - 1);\n\n  if (isRightPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y,\n      x + 1,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isLeftPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y,\n      x - 1,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isDownPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y + 1,\n      x,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isUpPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y - 1,\n      x,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isUpRightPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y - 1,\n      x + 1,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isUpLeftPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y - 1,\n      x - 1,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isDownRightPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y + 1,\n      x + 1,\n      stringToTest,\n      coordinates\n    );\n  }\n\n  if (isDownLeftPossible) {\n    findWords(\n      foundWordsReference,\n      board,\n      possibleWords,\n      y + 1,\n      x - 1,\n      stringToTest,\n      coordinates\n    );\n  }\n}\n\nexport function solveForBoard(board: IBoard) {\n  const wordsOrganizedByFirstLetter = organizeWordsByFirstLetter(wordlist);\n\n  const foundWords: IResult[] = [];\n\n  for (const y of Object.keys(board)) {\n    for (const x of Object.keys(board[Number(y)])) {\n      const letter = board[Number(y)][Number(x)];\n\n      findWords(\n        foundWords,\n        board,\n        wordsOrganizedByFirstLetter[letter.toLocaleLowerCase()],\n        Number(y),\n        Number(x)\n      );\n    }\n  }\n\n  return foundWords;\n}\n\nexport function convertFlatBoardTo2D(letters: string[]): IBoard {\n  return letters.reduce(\n    (prev, curr, index) => {\n      const chunk = Math.floor(index / 4);\n\n      prev[chunk] = [...(prev[chunk] || []), curr];\n      return prev;\n    },\n    [] as IBoard\n  );\n}\n\nexport function lowerCaseFlatBoard(letters: string[]) {\n  return letters.map(letter => letter.toLocaleLowerCase());\n}\n","import styled from '@emotion/styled/macro';\nimport groupBy from 'lodash/groupBy';\nimport React, { Component } from 'react';\nimport * as SolverService from './services/SolverService';\n\nconst convertNumberToXY = (i: number) => ({\n  x: i % 4,\n  y: Math.floor(i / 4)\n});\n\nconst Results = styled.div`\n  padding: 2rem;\n  background: linear-gradient(to right, #5e2a62, #633979);\n  color: #fff;\n\n  b {\n    text-transform: uppercase;\n    font-weight: normal;\n    font-size: 0.8rem;\n    letter-spacing: 0.05rem;\n  }\n\n  ul {\n    cursor: pointer;\n    list-style: none;\n    padding: 0;\n\n    li {\n      padding: 0.25rem 0rem;\n\n      ul {\n        padding-top: 0.25rem;\n        padding-left: 0.5rem;\n      }\n    }\n  }\n`;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  display: flex;\n`;\n\nconst Box = styled.div`\n  display: grid;\n  grid-template-columns: 3rem 3rem 3rem 3rem;\n  grid-template-rows: 3rem 3rem 3rem 3rem;\n  grid-gap: 0.5rem;\n  padding: 1rem;\n  border-radius: 0.5rem;\n`;\n\ninterface IInputProps {\n  highlighted: boolean;\n}\n\nconst Input = styled.input<IInputProps>`\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  text-align: center;\n  font-size: 2rem;\n  color: #838383;\n  border-radius: 0.25rem;\n  font-family: monospace;\n\n  &:focus {\n    outline-color: #ddd;\n  }\n\n  ${props =>\n    props.highlighted &&\n    `\n    background: rgba(0, 0, 0, 0.1);  \n  `}\n`;\n\ninterface IAppState {\n  values: string[];\n  results: SolverService.IResult[];\n  openedWords: string[];\n  highlightedPath: SolverService.ICoordinate[];\n}\n\nclass App extends Component<{}, IAppState> {\n  public state: IAppState = {\n    highlightedPath: [],\n    openedWords: [],\n    results: [],\n    values: [...Array(4 * 4)].map(() => '')\n  };\n\n  private inputRefs: Array<React.RefObject<HTMLInputElement>> = [\n    ...Array(4 * 4)\n  ].map(() => React.createRef());\n\n  public render() {\n    const { highlightedPath, openedWords, results, values } = this.state;\n\n    const groupedResults = groupBy(results, 'word');\n    const words = Object.keys(groupedResults).sort((a, b) => {\n      return b.length - a.length;\n    });\n\n    return (\n      <Container>\n        <Results>\n          <b>{words.length} löydettyä sanaa</b>\n          <ul>\n            {words.map((word, i) => (\n              <li key={`${i}_${word}`} onClick={this.toggleWord(word)}>\n                {word}\n\n                {openedWords.includes(word) && (\n                  <ul>\n                    {groupedResults[word].map((result, path) => (\n                      <li\n                        key={`${i}_${word}_${path}`}\n                        onClick={this.highlightPath(result.path)}\n                      >\n                        {result.word}\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </li>\n            ))}\n          </ul>\n        </Results>\n        <Box>\n          {this.inputRefs.map((ref, i) => (\n            <Input\n              ref={ref}\n              type=\"text\"\n              key={i}\n              onChange={this.onChange(i)}\n              value={values[i]}\n              highlighted={highlightedPath.some(coordinate => {\n                const coordinates = convertNumberToXY(i);\n\n                return (\n                  coordinates.x === coordinate.x &&\n                  coordinates.y === coordinate.y\n                );\n              })}\n            />\n          ))}\n        </Box>\n      </Container>\n    );\n  }\n\n  private toggleWord = (word: string) => () => {\n    const { openedWords } = this.state;\n\n    if (openedWords.includes(word)) {\n      this.setState({\n        openedWords: openedWords.filter(openedWord => openedWord !== word)\n      });\n    } else {\n      this.setState({\n        openedWords: [...openedWords, word]\n      });\n    }\n  };\n\n  private highlightPath = (path: SolverService.ICoordinate[]) => () => {\n    this.setState({ highlightedPath: path });\n  };\n\n  private solveBoard = () => {\n    const { values } = this.state;\n\n    const board = SolverService.convertFlatBoardTo2D(\n      SolverService.lowerCaseFlatBoard(values)\n    );\n\n    this.setState({\n      results: SolverService.solveForBoard(board)\n    });\n  };\n\n  private onChange = (key: number) => (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { values } = this.state;\n    const newValues = values.slice(0);\n\n    newValues[key] = event.currentTarget.value.slice(-1).toLocaleUpperCase();\n\n    this.setState({ values: newValues, highlightedPath: [] }, () => {\n      const allValuesSet = newValues.every(letter => letter.length > 0);\n\n      if (allValuesSet) {\n        this.solveBoard();\n      }\n    });\n\n    const nextInput =\n      this.inputRefs[key + 1] && this.inputRefs[key + 1].current;\n\n    if (nextInput) {\n      nextInput.focus();\n    }\n  };\n}\n\nexport default App;\n","// tslint:disable:no-console\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}